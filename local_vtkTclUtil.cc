/* This file is a modification of some of source of the Visualization Toolkit, which is 
subject to the copyright terms below. Specifically, this is a modification of the file 
Common/vtkTclUtil.cxx of version 5.10.1. This file has been included in the original as 
vtkTclUtil.cxx.original */

/*=========================================================================

  Program:   Visualization Toolkit
  Module:    Copyright.txt

Copyright (c) 1993-2008 Ken Martin, Will Schroeder, Bill Lorensen 
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither name of Ken Martin, Will Schroeder, or Bill Lorensen nor the names
   of any contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/

#include <vtkCallbackCommand.h>
#include <vtkTclUtil.h>

extern "C"
{
#if (TCL_MAJOR_VERSION == 8) && (TCL_MINOR_VERSION >= 4)
  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, CONST84 char *[]);
#else
  typedef int (*vtkTclCommandType)(ClientData, Tcl_Interp *,int, char *[]);
#endif
}

vtkTclInterpStruct *vtkGetInterpStruct(Tcl_Interp *interp)
{
  vtkTclInterpStruct *is = static_cast<vtkTclInterpStruct *>(Tcl_GetAssocData(interp,(char *)("vtk"),NULL));
  if (!is)
    {
    vtkGenericWarningMacro("unable to find interp struct");
    }
  return is;
}

/* copied from function vtkTclGetObjectfromPointer in VTK/COMMON/vtkTclUtil.cxx
The following modifications have been made: 
	- a name may be specified (in_name);
    - if a name is neither found nor specified, the autogenerated name is of the form vtkObj%i, not vtkTemp%i;
    - the refcount of the object is incremented;
	- the function returns TCL_OK or TCL_ERROR
*/
VTKTCL_EXPORT int local_vtkTclGetObjectFromPointer(Tcl_Interp *interp, void *temp1, const char *targetType, char *in_name)
{
  int (*command)(ClientData, Tcl_Interp *,int, char *[]) = 0;
  int is_new;
  vtkObject *temp = static_cast<vtkObject *>(temp1);
  char temps[80];
  char name[80];
  Tcl_HashEntry *entry;
  vtkTclInterpStruct *is = vtkGetInterpStruct(interp);
  Tcl_CmdInfo cinf;

  /* if it is NULL then return empty string */
  if (!temp)
    {
    Tcl_ResetResult(interp);
	// todo: error?
    return TCL_OK;
    }
  
  /* return a pointer to a vtk Object */
  if (is->DebugOn)
    {
      vtkGenericWarningMacro("Looking up name for vtk pointer: " << temp);
    }

  /* first we must look up the pointer to see if it already exists */
  sprintf(temps,"%p",temp);
  if ((entry = Tcl_FindHashEntry(&is->PointerLookup,temps))) 
    {
    if (is->DebugOn)
      {
        vtkGenericWarningMacro("Found name: " 
                               << static_cast<char *>(Tcl_GetHashValue(entry)) 
                               << " for vtk pointer: " << temp);
      }
    
    /* while we are at it store the name since it is required anyhow */
    Tcl_SetResult(interp, static_cast<char *>(Tcl_GetHashValue(entry)), TCL_VOLATILE);
    return TCL_OK;
    }

  /* we must create a new name if in_name is NULL or empty string */
  if (in_name==NULL||in_name[0]=='\0') {
	  sprintf(name,"vtkObj%i",is->Number);
	  is->Number++;
  } else {
	  sprintf(name,"%s",in_name);
	  // ensure name doesn't start with a number
	  if (name[0]>='0' && name[0]<='9') { 
		  Tcl_SetResult(interp, name, TCL_VOLATILE);
		  Tcl_AppendResult(interp, ": vtk object cannot start with a numeric.", NULL);
		  return TCL_ERROR;
	  }
	  // ensure name isn't already a vtk object
	  if (Tcl_FindHashEntry(&is->InstanceLookup,name))
		  { 
			  if (is->DeleteExistingObjectOnNew)
				  {
					  Tcl_DeleteCommand(interp, name);
				  }
			  else
				  {
					  Tcl_SetResult(interp, name, TCL_VOLATILE);
					  Tcl_AppendResult(interp,
									   ": a vtk object with that name already exists.",
									   NULL);
					  return TCL_ERROR;
				  }
		  }
	  // make sure we are not clobbering a built in command
	  if (Tcl_GetCommandInfo(interp,name,&cinf))
		  {
			  Tcl_SetResult(interp, name, TCL_VOLATILE);
			  Tcl_AppendResult(interp,
							   ": a tcl/tk command with that name already exists.",
							   NULL);
			  return TCL_ERROR;
		  }
	  // make sure we don't clobber any existing name
  }
  
  if (is->DebugOn)
    {
      vtkGenericWarningMacro("Created name: " << name
                             << " for vtk pointer: " << temp);
    }

  // check to see if we can find the command function based on class name
  char *tstr = strdup(temp->GetClassName());
  if (Tcl_GetCommandInfo(interp,tstr,&cinf))
    {
    if (cinf.clientData)
      {
      vtkTclCommandStruct *cs = static_cast<vtkTclCommandStruct *>(cinf.clientData);
      command = cs->CommandFunction;
      }
    }
  // if the class command wasn;t found try the target return type command
  if (!command && targetType)
    {
    if (tstr)
      {
      free(tstr);
      }
    tstr = strdup(targetType);
    if (Tcl_GetCommandInfo(interp,tstr,&cinf))
      {
      if (cinf.clientData)
        {
        vtkTclCommandStruct *cs = static_cast<vtkTclCommandStruct *>(cinf.clientData);
        command = cs->CommandFunction;
        }
      }
    }
  // if we still do not havbe a match then try vtkObject
  if (!command)
    {
    if (tstr)
      {
      free(tstr);
      }
    tstr = strdup("vtkObject");
    if (Tcl_GetCommandInfo(interp,tstr,&cinf))
      {
      if (cinf.clientData)
        {
        vtkTclCommandStruct *cs = static_cast<vtkTclCommandStruct *>(cinf.clientData);
        command = cs->CommandFunction;
        }
      }
    }
  if (tstr)
    {
    free(tstr);
    }

  entry = Tcl_CreateHashEntry(&is->InstanceLookup,name,&is_new);
  Tcl_SetHashValue(entry,static_cast<ClientData>(temp));
  entry = Tcl_CreateHashEntry(&is->PointerLookup,temps,&is_new);
  Tcl_SetHashValue(entry,static_cast<ClientData>(strdup(name)));
  vtkTclCommandArgStruct *as = new vtkTclCommandArgStruct;
  as->Pointer = static_cast<void *>(temp);
  as->Interp = interp;
  Tcl_CreateCommand(interp,name,
                    reinterpret_cast<vtkTclCommandType>(command),
                    static_cast<ClientData>(as),
                    reinterpret_cast<Tcl_CmdDeleteProc *>(vtkTclGenericDeleteObject));
  entry = Tcl_CreateHashEntry(&is->CommandLookup,name,&is_new);
  Tcl_SetHashValue(entry,(ClientData)(command));
  
  // setup the delete callback
  vtkCallbackCommand *cbc = vtkCallbackCommand::New();
  cbc->SetCallback(vtkTclDeleteObjectFromHash);
  cbc->SetClientData(static_cast<void *>(as));
  as->Tag = temp->AddObserver(vtkCommand::DeleteEvent, cbc);
  cbc->Delete();
  
  // increment reference count
  temp->SetReferenceCount(temp->GetReferenceCount()+1);

  Tcl_SetResult(interp, static_cast<char *>(name), TCL_VOLATILE);
  return TCL_OK;
}
